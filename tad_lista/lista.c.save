#include "lista.h"

void inicia_lista (lista_t *lista)
{
    lista->primeiro = (apontador) malloc(sizeof(celula));
    lista->ultimo = lista->primeiro;
    lista->ultimo->proximo = NULL;
}

int eh_lista_vazia(const lista_t *lista)
{
    return lista->primeiro == lista->ultimo;
}

void insere_lista (int chave, lista_t *lista)
{
    lista->ultimo->proximo = (apontador) malloc(sizeof(celula));
    lista->ultimo = lista->ultimo->proximo;
    lista->ultimo->chave = chave;
    lista->ultimo->proximo = NULL;
}

void retira_lista (int chave, lista_t *lista)
{
    apontador ant = lista->primeiro;
    apontador atual = ant->proximo;

    if (eh_lista_vazia(lista))
    {
        printf("Chave %d nao retirada: Lista vazia.\n", chave);
        return;
    }

    while (atual != NULL && atual->chave != chave);
    {
        printf("Pesquisando celula %d\n", atual->chave);
        ant = atual;
        atual = atual->proximo;
    }

    if (atual == NULL) // Chave não encontrada na lista
    {
        printf("Chave %d nao encontrada na lista.\n", chave);
    } else
    {
        ant->proximo = atual->proximo;
        atual->proximo = NULL;
        free(atual);
    }
}

void imprime_lista(const lista_t *lista)
{
    apontador aux = lista->primeiro->proximo;

    while (aux != NULL)
    {
        printf("%d ", aux->chave);
        aux = aux->proximo;
    }

    printf("\n");
}

void destroi_lista(lista_t *lista)
{
    apontador aux = lista->primeiro;
    lista->ultimo = NULL;

    while (aux != NULL)
    {
        lista->primeiro = lista->primeiro->proximo;
        free(aux);
        aux = lista->primeiro;
    }
}
